https://meet.google.com/kbu-jggk-aic

Nagraj
	mon -thu =>mon -even 3
	fri=>till 1pm
	sat n sun=>till 9
Akanksha
	=>10max


FullStack development
-------------------------------
FrontEnd +BackEnd

html=>Hyper Text Markup Language
css ==>Cascading Style Sheets
Bootstrap=>Responsive Web Design(RWD)
Javascript
Reactjs

Nodejs(expressjs)
MongoDB


Mern Stack==>MongoDb+expressjs+React+Node
Mean Stack =>MongoDb+expressjs+Angular+Node

==============================
HTML5
Hyper Text Markup Language

commonds in html is called =>html tags
html tags are 2 types
	1) Opening Tag
		ex: <title> 
	2) Closing Tag
		ex: </title>

html files saves as '.html'
html is 'not case sensitive'
Element:
=======
	<title> sfdssdfsd </title>

<br>  ==>break
<hr> ==>horizontal ruler

Heading tags:
===========
Headings are 6 types
	<h1> </h1>  =>big heading
	<h2> </h2>
	.
	.
	<h6> </h6> =>small heading

Paragraph tag:
===========
	<p> </p> ==>paragraph

Attributes:
=========
Attributes provide additional information about elements · Attributes are always specified in the start tag 

headings and paragraph attributes:
	align="left/center/right"

	<h1 align="center"> </h1>

31st July:
=======
list items
list items are 2 types
	1) order list item
		<ol> </ol>
	2)unorder list item
		<ul> </ul>


inserting images:
===============
	<img src="pic.jpg/gif/png">
	Attributes for img tag:
		width
		height
		border
		title
		alt
ex:
	<img src="pic.jpg" width="300px" border="2px" title="title here" alt="Some description">

Hyperlinks:
===========
	<a href="file.html"> link </a>
	a==>anchor
	href=>hyper reference


Forms:
======
	<form> </form>
	<input type="text/password/checkbox/radio/email/range/file/submit/reset">
	
	<select>
	<option> </option>
	</select>

	<textarea> </textarea>

1st August:
========
<table> </table>
<tr> </tr> ==>table row
<td> </td> ==>table data
<th> </th> ==>table head

Not finished....
iframe
divs
html5 tags

CSS3
=====
Cascading Style Sheets

CSS is used for describing the presentation of Web pages, including colors, layout, and fonts. It allows one to adapt the presentation to different types of devices, such as large screens, small screens, or printers.

Advantages:
CSS saves time − You can write CSS once and then reuse same sheet in multiple HTML pages. You can define a style for each HTML element and apply it to as many Web pages as you want.

Pages load faster − If you are using CSS, you do not need to write HTML tag attributes every time. Just write one CSS rule of a tag and apply it to all the occurrences of that tag. So less code means faster download times.

Easy maintenance − To make a global change, simply change the style, and all elements in all the web pages will be updated automatically.

Superior styles to HTML − CSS has a much wider array of attributes than HTML, so you can give a far better look to your HTML page in comparison to HTML attributes.

Multiple Device Compatibility − Style sheets allow content to be optimized for more than one type of device. By using the same HTML document, different versions of a website can be presented for handheld devices such as PDAs and cell phones or for printing.

Global web standards − Now HTML attributes are being deprecated and it is being recommended to use CSS. So its a good idea to start using CSS in all the HTML pages to make them compatible to future browsers.

Css can be applied to web pages in 3ways
	1) Internal css
	2) External css
	3) Inline css


	syntax:
		selector{ 
		    property:value;		
			}
	ex:
		h1{
		color:red;
		}


css properties:
==========
color:red;
font-family:arial;
font-size:1.4em;
text-align:left/center/right;
background-color:yellow;
width:300px;
height:300px;
border:1px solid/dotted/dashed red;

2nd Aug:

border-left/right/top/bottom:10px solid red;
list-style-type:none/circle/square;
list-style-img:url(pic.jpg);

background-image:url(pic.jpg);
backgorund-repeat:no-repeat/repeat-x/repeat-y;

margin:30px; ===>margin is a space outside of the element
padding:30px; ===>padding is a space inside the element

Selectors:
==========
	1)Tag / Element Selector
		ex: h1{ }
	2) class selector
		ex: .abc{}
	3) id selector
		ex: #abc{}
	4) pseudo selector
		ex: a:hover{}

text-decoration:none;
3rd Aug:
=======
class selector:
=========
class selector is used to select all elements which belong to a particular class attribute. 
In order to select the elements with a particular class, use the period (.) character specifying the class name ie., it will match the HTML element based on the contents of their class attribute.

	.className{ }

	<h1 class="className"> </h1>

divisions:

float:left/right;

border-radius:30px;
border-radius:30px 0px;
border-radius:30px 0px 90px 10px;
border-radius:50%;
box-shadow:10px 10px 10px black;
	
4th Aug:
=======
line-height:20px;
clear:left/right/both;

Responsive Web Design(RWD)
=======================
Media queries:
------------------------
Media query is a CSS technique introduced in CSS3.

It uses the @media rule to include a block of CSS properties only if a certain condition is true.


Media queries allow you to apply CSS styles depending on a device's general type (such as print vs. screen) or other characteristics such as screen resolution or browser viewport width. 
Media queries are used for the following: 
To conditionally apply styles with the CSS @media and @import at-rules.

CSS Media queries are a way to target browser by certain characteristics, features, and user preferences, then apply styles or run other code based on those things. 

Perhaps the most common media queries in the world are those that target particular viewport ranges and apply custom styles, which birthed the whole idea of responsive design.

@media screen and (max-width:999px){

}

Id selector:
=========
 id's are used for unique elements. it should not be repeated. i.e it should not be called number of times, where as class can be called number of times

	#idName{ }

	<h2 id="idName"> </h2>


5th Aug:
======
external css ==>Create a html and css file separatlhy 
	<head>
		<link href="file.css" rel="stylesheet">
	</head>
RWD

6th Aug:
=======
transition:property time
transform:scale(1) / rotate() /skew()
cursor:pointer;

display:none/inline/block/inline-block/flex;

INLINE AND BLOCK ELEMENTS:
===========================
BLOCK ELEMENT:
A block-level element always starts on a new line, and the browsers automatically add some space (a margin) before and after the element.

A block-level element always takes up the full width available (stretches out to the left and right as far as it can).
Two commonly used block elements are: <p> and <div>.
The <p> element defines a paragraph in an HTML document.
The <div> element defines a division or a section in an HTML document.

INLINE ELEMENTS:
An inline element does not start on a new line.
An inline element only takes up as much width as necessary.
This is a <span> element inside a paragraph.
<img>
<a>

inline-block:
display: inline-block allows to set a width and height on the element. Also, with display: inline-block , the top and bottom margins/paddings are respected, but with display: inline they are not.

FLEX BOX MODEL:
================
display:flex;
justify-content:flex-start / center /flex-end /space-around /space-between;   =>alinging horizontally
align-items:flex-start /center / flex-end;  ==>aligning vertically

8th Aug:

flex-direction: row/column;

box-sizing: border-box;
<span> </span>


positions:
=======
position:static/relative/absolute/fixed/sticky;
left:30px;
right:30px;
top:30px;
bottom:30px;

12th Aug:
=======
vh
vw
height: 100vh means 100% of the viewport height,
height: 100% means 100% of the parent's element height.

html 5 tags:
=========
<video> </video>
<audio> </audio>
<header> </header>
<footer> </footer>
<nav> </nav>
<aside> </aside>
<section> </section>
<article> </article>
<figure> </figure>
<figcaption> </figcaption>


Bootstrap:
=======
bootstrap is a framework of css
Bootstrap is the most popular HTML, CSS, and JavaScript framework for developing responsive, mobile-first websites.
Bootstrap is a widely-used open-source front-end framework for web development, providing a collection of HTML, CSS, and JavaScript components and tools that enable developers to build responsive, mobile-first websites with ease.

Bootstrap contains in buil templates
Bootstrap contains in built classes

	defining a class=> .abc{}
	calling a class => <h1 class="abc"> </h1>

	=> getbootstrap.com

why bootstrap:
It is Faster and Easier way for Web-Development.
It creates Platform-independent web-pages.
It creates Responsive Web-pages.
It designs responsive web pages for mobile devices too.
It is a free and open-source framework available on www.getbootstrap.com

<head>
	<link href="style.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-4bw+/aepP/YC94hEpVNVgiZdgIC5+VKNBQNGCHeKRQN+PtmoHDEXuppvnDJzQIu9" crossorigin="anonymous">
</head>

typography / text classes:
===================
text-primary
text-danger
text-success
text-dark
text-light
text-warning
text-info

text alignment:
===========
text-start
text-center
text-end

background classes:
=================
bg-danger
bg-success
bg-warning
bg-info
bg-dark
bg-ligt
bg-primary
bg-secondary


Button classes:
===========
btn
btn-dark
btn-danger
btn-success
btn-primary
btn-warning
btn-info

btn-outline-primary

image classes:
==============
img-fluid
img-thumbnail

border classes:
=============
border
border-top
border-botto
border-start
border-end
border-1  --- 5  =>thickness

border-primary etc

23rd Aug:
=======
table classes:
==========
table
table-primary /secondary/danger.....

Alert classes:
==========
alert
alert-primary/secondary/success/warning...

grid model:
========
24th Aug:
=======
grid with all six break points
card
card and grid
navbar

25th Aug:
======
collapse class
js functionalities:
----------------------
data-bs-toggle="collapse" 
data-bs-target="#collapseExample"

forms:
======
form-control
col-auto

carousel  ==>sliding images
	carousel 
	slide
	carousel-inner
	carousel-item


28th Aug:
=======
bootstrap 

font awesome

29th Aug:
==========
Javascript
--------------
javascript is used for 'Client side' applications
using javascript 
	interactive website, 
	dynamic websites and 
	client side validations can be done

JavaScript (JS) is a lightweight interpreted (or just-in-time compiled) programming language with first-class functions. While it is most well-known as the scripting language for Web pages, many non-browser environments also use it, such as Node.js, Apache CouchDB and Adobe Acrobat. JavaScript is a prototype-based, multi-paradigm, single-threaded, dynamic language, supporting object-oriented, imperative, and declarative (e.g. functional programming) styles.


computers can understand only machine language, it will not understand english, telugu or any other language
	i.e => binary code ==> 0 or 1
	for example
		a=>01100110
Converting user language to machine language is possible with compiler or interpreter

Compiling vs Interpreted Language:
===========================
What is Compiled Language?
A compiled language is a programming language that is generally compiled and not interpreted. It is one where the program, once compiled, is expressed in the instructions of the target machine; this machine code is undecipherable by humans. Types of compiled language – C, C++, C#, CLEO, COBOL, etc. 

What is Interpreted Language?
An interpreted language is a programming language that is generally interpreted, without compiling a program into machine instructions. 
It is one where the instructions are not directly executed by the target machine, but instead, read and executed by some other program. Interpreted language ranges – JavaScript, Perl, Python, BASIC, etc. 

javascript comes under interpreted language

	SOURCE CODE   ==>INTERPRETER ==>OUTPUT

=>javascript  is case sensitive
	document ==.>valid
	Document ==>invalid
	DOCUMENT=>invlaid

document.write()

30th Aug
=======
using html tags and attributes in js
<br>
<hr color="red" size="12px">

double quotes are not allowed inside double quotes
single quotes are not allowed inside single quotes

alert() ==>used to alert the user
prompt() ==>used to take input value from user
confirm() ==>used to display confirmation message

Variables:
========
=>variables are contianers which are used to store the data
=>Variable a symbolic name associated with a value and whose associated value may be changed.
=>Variables are Containers for Storing Data
	
=>variables can be declared in javascript in 3 ways:
	1) var keyword   	=> var fname
	2) let keyword	=> let fname	
	3) const keyword	=> const fname

	let and const keywords are introduced in ES6(Ecma Script)

	
		var fname  		=>declaring a variable 
		fname="Javascript"   	=>assigning a value to a variable

	
6th Sept:
===========
cal app
bmi app
dollar 2 rupees conversion
measurement conversions app

DOM:
What is a DOM in JavaScript?
The Document Object Model (DOM) is a programming interface for web documents. It represents the page so that programs can change the document structure, style, and content. The DOM represents the document as nodes and objects; that way, programming languages can interact with the page.


document.getElementById():
The getElementById() method is one of the most common methods in the HTML DOM. 
It is used almost every time you want to read or edit an HTML element.

7th Sept;
=======
<body>
    <table border="2px" align="center">
        <tr>
            <td>Principle Amount</td>
            <td>Rate of intrest</td>
            <td>Result</td>
        </tr>
        <tr>
            <td id="principle"></td>
            <td id="interest"></td>
            <td id="total"></td>
        </tr>
    </table>
    <script>
        let prn = prompt("Enter principle amount")
        document.getElementById('principle').innerHTML = prn

        let roi = prompt("Enter rate of intrest")
document.getElementById('interest').innerHTML = (roi + "%")

        let result = prn * roi / 100
        document.getElementById('total').innerHTML = result


    </script>
</body>

getElementById('pic').src

Date() function : functions will execute on its own

Date() methods: Methods requires support of an object

getHours()
getMinutes()
getSeconds()

getDate()
getMonth()
getFullYear()
getDay()

toLocaleTimeString()
toLocaleDateString()


if else condition:
============
if(condition){
	statement
}else{
	statement
}

<=40 ===>Failed
>40 ===> Passed

8th Sept:
=======
uid=>javascript
	authorised user

Operators:
========
1) Assignment operator
	=
2) Arithmatic operator
	+,-,/,*,%
3) Conditional operators
	<=,>=,!=,==,===
	a=10
	a==10
	a===10
4) Logical operators
	&&(and), || (or)


if else if:
=======
	if(condition){

	}else if(condition){

	}else if(condition){

	}

<=40 ===>Failed
>40-<=50==>Passed
>50-<=60==>Second 
>60-<=70==>First
>70-<=100==>distinction

switch..case:
=========
it is alternative to if else if condition

syntax:
	switch(condtion){
	case :
	statement;
	break

	case :
	statement;
	break

	case :
	statement;
	break

	default
	statement
	}


10th Sept:
========
<body>
    <table border="2px" align="center">
        <tr>
            <td>Date (DD/MM/YYYY)</td>
            <td>Name</td>
            <td>Age</td>
            <td>Eligibility</td>
        </tr>
        <tr align="center">
            <td id="txt"></td>
            <td id="txt1"></td>
            <td id="txt2"></td>
            <td id="txt3"></td>
        </tr>
    </table>
<script>
        // date method
        let obj = new Date()
        let date = obj.getDate()
        let month = obj.getMonth() + 1
        let year = obj.getFullYear()

        document.getElementById('txt').innerHTML = date + "/" + month + "/" + year

        //Name Prompt
        let name = prompt("Please Enter Your Name:")

        document.getElementById('txt1').innerHTML = name

        //Age Prompt
        let age = prompt("Please Enter Your age:")

        document.getElementById('txt2
.innerHTML = age

        //Eligibility Logic
        if (age < 18) {
            document.getElementById('txt3').innerHTML = "Sorry! You are not eligible for driver licence" + " " + name
        }
        else {
            document.getElementById('txt3').innerHTML = "You are eligible for driver licence" + " " + name
        }
    </script>
</body>

length property:
============
	used to findout lenght of a given string


Arrays:
=====
Arrays are also variables with multiple data values
Arrays enables storing a collection of multiple items under a single variable name
=>JavaScript arrays are resizable and can contain a mix of different data types.
=>JavaScript arrays are zero-indexed: the first element of an array is at index 0, the second is at index 1, and so on

var students=["Anil", "Chetan", "Bharat", "Deepak"]

Objects:
=======
JavaScript objects are containers for named values, called properties and methods.

An object is a collection of properties, and a property is an association between a name (or key) and a value. 

A property's value can be a function, in which case the property is known as a method. Objects in JavaScript, just as in many other programming languages, can be compared to objects in real life.

ex:
	let car={
		//property:value
		color:'red',
		company:'Hyundai',
		mfg:2023
	}

	console.log(car.color)


11th Sept:
=======
Loops
Loops can execute a block of code a number of times.
Loops are handy, if you want to run the same code over and over again, each time with a different value.

JavaScript supports different kinds of loops:

for - loops through a block of code a number of times
while - loops through a block of code while a specified condition is true

for/in - loops through the properties of an object
for/of - loops through the values of an iterable object

do/while - also loops through a block of code while a specified condition is true

for loop:
======
syntax:
	for(initialise, condition, increment / decrement){
		code....
	}

<select>
<option>1</option>
<option>2</option>
<option>3</option>
<option>4</option>
</select>


while loop

Functions:
=======
A function is a block of organized, reusable code that is used to perform a single, related action. 
Functions provide better modularity for your application and a high degree of code reusing. 

Functions are 2 types
	1) inbuilt function	
		ex:Date() 
	2) User definef function
		ex: sudhakar()

How to define a function:
===================
1)	Normal function:(since begining of js)

	function Sudhakar(){
		code...
	}

	Sudhakar()


2)	Arrow function:(introduced in ES6(2015))

	const Sudhakar=()=>{
		code...
	}

	Sudhakar()

3) 	Anonymouse function:function without any name
	
	const Sudhakar=function(){
		code...
	}



Functions with Parameters and Arguments:
===============================
A parameter is one of the variables in a function. 
When the function is called,the arguments are the data you pass into the function's parameters.

	function Demo(uid){

	}

	Demo('javascript')
	Demo('React')


return statement:
==============
The return statement stops the execution of a function and returns a value.
	function Demo(){
		return "Hello js"
	}
	Demo()


Events:
=====
onclick event
onmouseover event
onmouseout event
onsubmit event
onscroll event
onchange event
onfocus event
onblur event
onkeydown event
onkeyup event

14th Sept:
=========
task with parameters
onsubmit validation
length
number validation
	isNaN() ==>is not a number?

onfocus event
onblur event

15th Sept;
=========
onchange event
	=>select , option

onchange color

for in 
and 
for of:
================
    //for in for objects where as for of for arrays
    const obj={
        name:'Anil',
        place:'Hyderabad',
        age:22
    }

    for(x in obj){
        //console.log(x)
        //document.write(x)
        //console.log(`key is :${x} and value is ${obj[x]}`)
        document.write(`key is :${x} and value is ${obj[x]}`)
    }

------------
for of:

    const arr=['a','b','c','d']

    for(x of arr){
        console.log(x)
        document.write(x+"<br>")
    }

--------------------

BMI EXAMPLE

    var w=prompt("weight")
    var h=prompt('height in meters(100cms=1m)')
    h=h*h
    bmi=w/h
    alert(bmi)
---------------------------------

17th Sept:
============

forEach():
=======
The forEach() method calls a function for each element in an array.

The forEach() method is not executed for empty elements.

const fruits = ["apple", "orange", "cherry"];
fruits.forEach(test)

function test(item){
document.write("<li>"+item+"</li>")
}
-----------------

Nested for loops:
============
What is a nested for loop in JavaScript?
We use the for loop statement of JavaScript for repeating a set of statements inside the loop body a specified number of times. A nested for loop, as the name suggests, is made up of more than one for loop one nested inside of the other. This allows us to loop over multidimensional data structures such as matrices.

How does a nested for loop work in JavaScript?
The most common type of nested loops will be one loop inside another. 
The first loop is usually called the outer loop while the second loop is called the inner loop. 
The outer loop always executes first, and the inner loop executes inside the outer loop each time the outer loop executes once.


for(){		==>outer for loop
	for(){	==>inner for loop

	}
}

-------------------------------
onkeydown and onkeyup event
onscroll event
onload event

setTimeout()

setInterval()

call back function=>a function calls another function
------------------------------------------


21st sept:
==========
Math:
======


Math.round(6.4); =>Returns the value of the number x rounded to the nearest integer.
	ex:6
Math.pow(2,4)=>Returns base x to the exponent power y (that is, xy).
Math.floor(6.4) => down to nearest
	ex:6
Math.ceil(6.4)  => upto nearest
	ex:7
Math.random() =>Returns a pseudo-random number between 0 and 1.
Math.max() =>Returns the largest of zero or more numbers.
Math.min() =>Returns the smallest of zero or more numbers.
Math.trunc(6.7)=> returns the integer part of x:
	ex:6
Math.sign(-6)=> Returns the sign of the x, indicating whether x is positive, negative, or zero.
	ex:-1
Math.sqrt(100) =>Returns the positive square root of x.
	ex: 10
Math.abs(x)=>returns the absolute (positive) value of x:
	ex:-6.7 => 6.7

--------------------------------------------------
Regular Expressions:
=================

Regular expressions are patterns used to match character combinations in strings. 
In JavaScript, regular expressions are also objects. 

   var str="javaScript";
   var pat=/[A-Z]/g;
   var res=str.match(pat);
   document.write(res);

[A-Z]
[a-z]
[0-9]
[^A-Z]  =>not A-Z
[^a-z]
[^0-9]

{3}==>3 letters
{3,6} ==>3-6

Search:
======
str.search("web");

Replace:
=======
str.replace("html","javascript");

Destructuring:
=============
What is the Destructuring in JavaScript?
Destructuring is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables. That is, we can extract data from arrays and objects and assign them to variables.

        // let user=['Anil','Hyderabad',22]
            // //let name=user[0]=>old method
        // let [name,place,age]=user
        // console.log(name)
        // console.log(place)
        // console.log(age)


Exception handling:
===================
What is exception handling in JavaScript?
Exception Handling Statements. An exception is an abnormal or unexpected condition that occurs during the runtime, and javascript provides various statements or a combination of statements to handle the exceptions. It handles exceptions in try-catch-finally statements and throws statements.


try and catch:

try{
var a= ["34","32","5","31","24","44","67"]; 
document.write(a);    
document.write(b);  
}catch(e){
alert("There is error which shows "+e.message); //Handling error
}

22nd Sept:
==========
const num1=Math.ceil(Math.random()*10)
console.log(num1)

const num1=Math.ceil(Math.random()*10)
const num2=Math.ceil(Math.random()*10)
const total=num1*num2
console.log(num1+" "+num2+"= "+total)
----------------------------------------------
  var x = document.getElementById("myInput");
  if (x.type == "password") {
    x.type = "text";
  } else {
    x.type = "password";
  }
--------------------------------------------------
getElementById
getElementByTagName
getElementByClassName

querySelector()  ==.it is alternativ to above 3 methods
=>document.querySelector("#box")
---------------------------------------------------
addEventListerner():

What is a addEventListener in JavaScript?
The addEventListener() is an inbuilt function in JavaScript which takes the event to listen for, and a second argument to be called whenever the described event gets fired. Any number of event handlers can be added to a single element without overwriting existing event handlers.

document.addEventListener("click", function(){
//alert("hello");
document.body.style.background="yellow";
});

----------------------------------------
localStorage:

localStorage.setItem("name","Sudhakar")
localStorage.setItem("email","ss@gmail.com")
document.write(localStorage.getItem('name'));
//localStorage.removeItem('email')
//localStorage.clear()

25th Sept;
=======
createElement() ==>h1,p, li,etc
createTextNode()
appendChild()
innerText()

getElementsByTagName()
getElementsByClassName()
querySelector()
querySelectorAll()

-----------------------
Spread Operator:
============
The JavaScript spread operator ( ... ) allows us to quickly copy all or part of an existing array or object into another array or object. 

	const arr1=['a','b','c']
	const arr2=['d','e','f']
	const comb=[...arr1, ...arr2]

Ternary operator:
==============
The conditional (ternary) operator is the only JavaScript operator that takes three operands: 
	=>a condition followed by a question mark (?), 
	=>then an expression to execute if the condition is truthy followed by a colon (:), 
	=>and finally the expression to execute if the condition is falsy. 
This operator is frequently used as an alternative to an if...else statement.

	var x="javascript"
	b=(x=="javascript" ? "You are right":"You are wrong")


Template Literals:
=============
Template literals are alternative to concatination with variables
	var x="javascript"
	document.write("Hello "+x)

alternative to above code is Template literals
in Template literals we use ' Back Tick (`) '
	var x="javascript"
	document.write(` Hello ${x}`)

3rd Oct
==========
NotePadApplication
	=>html file
	=>css file
	=>js file =>.js

#main
.note ==>white
.tool =>black
    icons
textarearea


font awesome
	link=>in google search for=>cdn font awesome

5th Oct:
======
javascript functionality for notepad app



9th Oct:
=========
REACT
	installation

npm init react-app my-app


17th oct:
=======
React is javascript library
developed and managed by facebook
React is useful for making 'user Interface(UI)' very effective and fast
react is usef for "Single Page Application(SPA)"

When should I use React?
If you're working on a frontend UI that demands high user interaction, you'll want to use React. It's a pain to code every one of those interactive elements and binds time together to the underlying business logic.

Why React should be used:

Write once, learn anywhere: We can develop new features in React without re-writing the existing code. It can also render on the server using Node and power mobile apps using React Native. So we can create IOS, Android, and Web applications simultaneously. In conclusion, extensive code reusability is supported by React.

It is simple: The component-based approach, automatic rendering, and use of just plain JavaScript make React very simple to learn, build a web (and mobile applications), and support it. We can mix Javascript and HTML together to create a special syntax called JSX which makes it easier to grasp and work with it.

SEO friendly: SEO is about making it easier for developers to find the right content for the user. When a user makes a search, search engines platforms like Google, Yahoo, Bing or Baidu try to find which page is the most relevant to that specific search. React affects the SEO by giving you a SPA (Single Page Application) which requires Javascript to show the content on the page which can then be rendered and indexed.

Fast, efficient, and easy to learn: It contains pre-built patterns and functions that can be chosen and combined like building blocks to create fast, appealing, and scalable projects in less time as compared to designing the entire application line by line. Also, unlike Angular and Ember which are referred to as ‘Domain-specific Language’, React only requires to need a basic knowledge of HTML and CSS fundamentals to start working with it.

Guarantees stable code: ReactJS solely use downward data flow to ensure that even minor changes in the child structures won’t have an impact on their parents. Developers only alter an object’s state when they change it; only specific components will then be updated. The stability of the code and consistent app performance are guaranteed by this data-binding mechanism.

It is backed by a strong community: React library was initially developed for internal use before being made available to everyone. The engineering teams from Facebook and Instagram as well as outside experts now support it. 

Understanding folder structure:
======================
	project folder (my-app)
		node_moduels folder
		public folder
		      index.html	=>important
		src folder
		      App.css
		      App.js
	                        App.test.js
		      Index.css
		      index.js


18th Oct:
=======
=>we write everything from beginining
=>delete all files from 'src' folder
=>create 'index.js' file in src folder
=>write some code in index.js file





const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
<h1> Hello name</h1>
);

jsx:
Javascript xml 
JSX stands for JavaScript XML. JSX allows us to write HTML in React. JSX makes it easier to write and add HTML in React.
It is a JavaScript extension that allows us to describe React's object tree using a syntax that resembles that of an HTML template.

i can say jsx is combination of html and javascript
	
multiple jsx elements should be wrapped in either div tag or fragment (< > </ >)
1)method one of wrapping: using div tag
    <div>
    <h1>Hello React</h1>
    <h2>jsx stands for javascript xml</h2>
    </div>

2)method two of wrapping: using fragment
    < >
    <h1>Hello React</h1>
    <h2>jsx stands for javascript xml</h2>
    </ >

Variables , objects, arrays using React:
===========================
Variables , objects, arrays etc can be embeded into react by using Expression =>{ }

let uid="React Apppication"

Hello {uid}

19th oct:
=======
if else condition
Date() function
date methods:

	getHours()
	getMinutes()
	getSeconds()

	getDate()
	getMonth()
	getFullYear()

	getDay()

	toLocaleTimeString()
	toLocaleDateString()


INSERTING IMAGES:
==================
	<img src="file.jpg"/>
	<hr/>
	<input type="text"/>
1)inserting image from src folder:
	=>import xyz from 'flower.jpg'
	=>including in jsx
		<img src={xyz} />

2)inserting image from public folder
	<img src="logo.png" />


using css in react:
============
	1) inline css
		<h1 style="color:red;"> hello </h1>=>way of writing in html
		
	in react =>need to create object and call it
		const clr={
			color:'red'
			}
		<h1 style={clor}> </h1>

	2) external css
		=>one html file
		=>one .css file
		=><link href="style.css" rel="stylesheet"> =>html way
		=>in react =>import style.css 
		import './style.css'
	=>calling class in html
		<h1 class="xyz"> </h1>
	=>whereas in react
		<h1 className="xyz"> </h1>
	3) internal css==>


30th Oct:
======
exporting and importing data values:
==========================
export default x
=>Only one default export allowed per module. 
	export default fname
=>for other data we need to export
	export {lname, place}

Components:
Components are independent and reusable bits of code. They serve the same purpose as JavaScript functions, but work in isolation and return HTML.		

A component is an independent, reusable bit of code which divides the UI into smaller pieces. For example, if we were building the UI of React website using Reactjs we can break its UI into smaller parts .

Instead of building the whole UI under one single file like HTML, we can divide all the sections (marked with red) into smaller independent pieces. In other words, these are components. Each component will go into its own JavaScript file. 

	in 2 ways we can create components
		1) function component
		2) class component

Function component:
===============
What are Functional Components? 
The first, most important and recommended component type in React is a functional component. A functional component is basically a JavaScript function that returns a React element (JSX).  

Functional components start with function keyword. 

Code:

function HelloWorld() { 
  return <h1>Hello world</h1>; 
}

or

const HelloWorld=()=>{
	  return <h1>Hello world</h1>; 
}


component has to be exported...

	export default HelloWorld

=>File name of a component should start with upper case
	ex:HelloWorld
		

1st nov:
=======
Props:
props stands for properties
props are like parameters and arguments
props used to send the data from one component to another

The word “props” implies “properties”, and its working functionality is quite similar to HTML attributes. 
	example of httml attribute	
	=> <h1 align="center"> </h1>
Basically, these props components are read-only components. In ReactJS, the data can be passed from one component to another component using these props, similar to how the arguments are passed in a function.

example of js parameters and arguments
	function test(fname){
		console.log('hello' +fname)
	}

	test('Peter')
	test('Anil')
	test('JOhn')


props in react
	function App(props){
		return(
		<h1> hello {props.fname}</h1>
		)
	}

Events:
=====
js		react
onclick event===>onClick event
onmouseover event==>onMouseOver event
onmouseout event ==>onMouseOut event
onchange ==>onChange event

in js => <button onclick='demo()'>click me</button>
in react => <button onClick={demo}>click me</button>


Class Components:
===================
class class_name extends React.Component{
	render(){
		return(
		<h1> </h1>
		)
	}	
}


Hooks:
=====
What are the Hooks in React?
Hooks are functions that let you “hook into” React state and lifecycle features from function components. 
Hooks allow function components to have access to state and other React features.
Hooks don't work inside class component

How many React Hooks are there?
You do not need to write an extra line of code in React. Hooks help write less coding functionality in React. React version 18 provides 15 hooks for developers. With 15 hooks, you achieve similar functionality to a class-based component

state:
====
The state is a built-in React object that is used to contain data or information about the component. 
A component's state can change over time; whenever it changes, the component re-renders.
State generally refers to data or properties that need to be tracking in an application.

useState() hook:
===========
What is useState in Reactjs?
useState is React Hook that allows you to add state to a functional component. 
It returns an array with two values: the current state and a function to update it. 
The Hook takes an initial state value as an argument and returns an updated state value whenever the setter function is called.

	const [state, setState] =useState("sudhakar")
How to use useState() hook:

To use the useState Hook, we first need to import it into our component.
	import { useState } from "react";


2nd Nov:
=======
update state 
update state with if else
update state =>numbers=>increment/decrement











useState hook with array:
What is useState in Reactjs?
useState is React Hook that allows you to add state to a functional component. 
It returns an array with two values:
	 the current state and 
	a function to update it. 

The Hook takes an initial state value as an argument and returns an updated state value whenever the setter function is called.
	const [state, setState]=useState('hello')

	const [state, setState]=useState(['a','b','c'])

function test(){
		setState(['d','e','f'])
	}

useState hook with object:
const [data,setData]=useState({fname:"Ravi", lname:"Kumar"})

Spread operator:
=============
The JavaScript spread operator ( ... ) allows us to quickly copy all or part of an existing array or object into another array or object.
	const numbersOne = [1, 2, 3];
	const numbersTwo = [4, 5, 6];
	const numbersCombined = [...numbersOne, ...numbersTwo];


useState hook with object, spread operator

function demo(){
    // setData({fname:'Ramesh'})  ==>this update only fname and lname dissapears so spread operator
    // spread operator will keep previous data, only updates required data
    setData({...data, fname:"Ramesh"})
  }

map:
map() creates a new array from calling a function for every array element. map() does not execute the function for empty elements.

let num=[10,20,30,40,50]
const [state,setState]=useState(num)
<ul>
  {
    state.map((n)=><li>{n}</li>)
  }
</ul>

10,20,30,40

10
40
60
80







=>not done
Promise

async
await

fetch() method
preventDefault
